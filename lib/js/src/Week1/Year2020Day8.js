// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SetInt = require("rescript/lib/js/belt_SetInt.js");

var input = Fs.readFileSync("input/Week1/Year2020Day8.sample.txt", "utf8");

var arr = input.split("\n");

var length = arr.length;

var val = {
  contents: 0
};

var currentIdx = {
  contents: 0
};

var set = {
  contents: undefined
};

var toChange = {
  contents: 0
};

function jump(i) {
  if (currentIdx.contents === toChange.contents) {
    currentIdx.contents = currentIdx.contents + 1 | 0;
  } else {
    currentIdx.contents = currentIdx.contents + i | 0;
  }
  
}

function acc(i) {
  currentIdx.contents = currentIdx.contents + 1 | 0;
  val.contents = val.contents + i | 0;
  
}

function $$do(s) {
  var splited = s.split(" ", 2);
  if (splited.length !== 2) {
    return ;
  }
  var match = splited[0];
  switch (match) {
    case "acc" :
        var v = splited[1];
        return acc(Belt_Option.getExn(Belt_Int.fromString(v)));
    case "jmp" :
        var v$1 = splited[1];
        return jump(Belt_Option.getExn(Belt_Int.fromString(v$1)));
    case "nop" :
        currentIdx.contents = currentIdx.contents + 1 | 0;
        return ;
    default:
      return ;
  }
}

while(currentIdx.contents < length && !Belt_SetInt.has(set.contents, currentIdx.contents)) {
  set.contents = Belt_SetInt.add(set.contents, currentIdx.contents);
  $$do(Belt_Array.getExn(arr, currentIdx.contents));
};

var whileFtn;

console.log(val.contents);

function id(t) {
  return t;
}

var jumpIdx = Belt_List.fromArray(Belt_Array.keepMap(Belt_Array.mapWithIndex(arr, (function (idx, s) {
                if (/^jmp/.test(s)) {
                  return idx;
                }
                
              })), id));

console.log(Belt_List.headExn(Belt_List.keepMap(jumpIdx, (function (toChangeIdx) {
                val.contents = 0;
                currentIdx.contents = 0;
                set.contents = undefined;
                toChange.contents = toChangeIdx;
                while(currentIdx.contents < length && !Belt_SetInt.has(set.contents, currentIdx.contents)) {
                  set.contents = Belt_SetInt.add(set.contents, currentIdx.contents);
                  $$do(Belt_Array.getExn(arr, currentIdx.contents));
                };
                if (currentIdx.contents === length) {
                  return val.contents;
                }
                
              }))));

exports.input = input;
exports.arr = arr;
exports.length = length;
exports.val = val;
exports.currentIdx = currentIdx;
exports.set = set;
exports.toChange = toChange;
exports.jump = jump;
exports.acc = acc;
exports.$$do = $$do;
exports.whileFtn = whileFtn;
exports.id = id;
exports.jumpIdx = jumpIdx;
/* input Not a pure module */
