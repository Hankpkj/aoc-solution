// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var input = Fs.readFileSync("input/Week1/Year2020Day5.sample.txt", "utf8");

var li = Belt_List.fromArray(input.split("\n"));

function findRange(r, signLeft) {
  var mid = r.mid;
  if (signLeft) {
    var start = r.start;
    return {
            start: start,
            mid: (start + mid | 0) / 2 | 0,
            end: mid
          };
  }
  var end = r.end;
  return {
          start: mid + 1 | 0,
          mid: ((mid + 1 | 0) + end | 0) / 2 | 0,
          end: end
        };
}

var initRowRange = {
  start: 0,
  mid: 63,
  end: 127
};

var initColRange = {
  start: 0,
  mid: 3,
  end: 7
};

function findMid(r, ir, c) {
  return Belt_List.reduce(r, ir, (function (acc, cur) {
                return findRange(acc, cur === c);
              })).mid;
}

var ids = Belt_List.toArray(Belt_List.map(li, (function (str) {
            var splitted = Belt_List.splitAt(Belt_List.fromArray(str.split("")), 7);
            return Belt_Option.mapWithDefault(splitted, 0, (function (param) {
                          var row = findMid(param[0], initRowRange, "F");
                          var col = findMid(param[1], initColRange, "L");
                          return (row << 3) + col | 0;
                        }));
          })));

var max = Caml_splice_call.spliceApply(Math.max, [ids]);

console.log(max);

var sorted = Belt_List.fromArray(Belt_SortArray.stableSortBy(ids, (function (n1, n2) {
            return n1 - n2 | 0;
          })));

var tails = Belt_List.tail(sorted);

var slidingWindow = tails !== undefined ? Belt_List.zip(sorted, tails) : /* [] */0;

var keeping = Belt_List.head(Belt_List.map(Belt_List.keep(slidingWindow, (function (param) {
                return (param[1] - param[0] | 0) !== 1;
              })), (function (param) {
            return (param[0] + param[1] | 0) / 2 | 0;
          })));

if (keeping !== undefined) {
  console.log(keeping);
} else {
  console.log("Not Found");
}

exports.input = input;
exports.li = li;
exports.findRange = findRange;
exports.initRowRange = initRowRange;
exports.initColRange = initColRange;
exports.findMid = findMid;
exports.ids = ids;
exports.max = max;
exports.sorted = sorted;
exports.slidingWindow = slidingWindow;
exports.keeping = keeping;
/* input Not a pure module */
