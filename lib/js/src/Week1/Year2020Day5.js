// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var input = Fs.readFileSync("input/Week1/Year2020Day5.sample.txt", "utf8");

var li = Belt_List.fromArray(input.split("\n"));

function findRange(r, signLeft) {
  var mid = r.mid;
  if (signLeft) {
    var start = r.start;
    return {
            start: start,
            mid: (start + mid | 0) / 2 | 0,
            end: mid
          };
  }
  var end = r.end;
  return {
          start: mid + 1 | 0,
          mid: ((mid + 1 | 0) + end | 0) / 2 | 0,
          end: end
        };
}

var initRowRange = {
  start: 0,
  mid: 63,
  end: 127
};

var initColRange = {
  start: 0,
  mid: 3,
  end: 7
};

var ids = Belt_List.toArray(Belt_List.map(li, (function (str) {
            var splitted = Belt_List.splitAt(Belt_List.fromArray(str.split("")), 7);
            if (splitted === undefined) {
              return 0;
            }
            var row = Belt_List.reduce(splitted[0], initRowRange, (function (acc, cur) {
                    return findRange(acc, cur === "F");
                  })).mid;
            var col = Belt_List.reduce(splitted[1], initColRange, (function (acc, cur) {
                    return findRange(acc, cur === "L");
                  })).mid;
            return (row << 3) + col | 0;
          })));

var max = Caml_splice_call.spliceApply(Math.max, [ids]);

console.log(max);

var sorted = Belt_List.fromArray(ids.sort(function (n1, n2) {
          return n1 - n2 | 0;
        }));

var head = Belt_List.headExn(sorted);

var mySeat = Belt_List.reduce(sorted, head, (function (acc, cur) {
        if ((acc + 1 | 0) === cur) {
          return cur;
        } else {
          return acc;
        }
      })) + 1 | 0;

console.log(mySeat);

exports.input = input;
exports.li = li;
exports.findRange = findRange;
exports.initRowRange = initRowRange;
exports.initColRange = initColRange;
exports.ids = ids;
exports.max = max;
exports.sorted = sorted;
exports.head = head;
exports.mySeat = mySeat;
/* input Not a pure module */
