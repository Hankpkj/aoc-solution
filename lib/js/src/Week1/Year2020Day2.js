// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week1/Year2020Day2.sample.txt", "utf8");

var li = Belt_List.fromArray(input.split("\n"));

function id(a) {
  return a;
}

function split(string) {
  return Belt_Array.keepMap(string.split(/[ :\s | \- | \s ]/g), id);
}

var intStringToInt = Belt_Int.fromString;

function parsing(fullString) {
  var splitted = Belt_List.fromArray(split(fullString));
  if (!splitted) {
    return ;
  }
  var match = splitted.tl;
  if (!match) {
    return ;
  }
  var match$1 = match.tl;
  if (!match$1) {
    return ;
  }
  var match$2 = match$1.tl;
  if (!match$2) {
    return ;
  }
  if (match$2.tl) {
    return ;
  }
  var d = match$2.hd;
  var c = match$1.hd;
  var b = match.hd;
  return Belt_Option.flatMap(Belt_Int.fromString(splitted.hd), (function (a) {
                return Belt_Option.map(Belt_Int.fromString(b), (function (b) {
                              return {
                                      low: a,
                                      high: b,
                                      target: c,
                                      source: d
                                    };
                            }));
              }));
}

function judgeX(policy) {
  var cnt = Belt_List.size(Belt_List.keep(Belt_List.fromArray(policy.source.split("")), (function (x) {
              return x === policy.target;
            })));
  if (cnt >= policy.low) {
    return cnt <= policy.high;
  } else {
    return false;
  }
}

function judgeY(policy) {
  var target = policy.target;
  var sourceToArr = policy.source.split("");
  var first = Belt_Option.mapWithDefault(Belt_Array.get(sourceToArr, policy.low - 1 | 0), "Not Found", (function (x) {
          return x;
        })) === target;
  var second = Belt_Option.mapWithDefault(Belt_Array.get(sourceToArr, policy.high - 1 | 0), "Not Found", (function (x) {
          return x;
        })) === target;
  return first !== second;
}

console.log(Belt_List.size(Belt_List.keep(Belt_List.keepMap(li, parsing), judgeX)));

console.log(Belt_List.size(Belt_List.keep(Belt_List.keepMap(li, parsing), judgeY)));

exports.input = input;
exports.li = li;
exports.id = id;
exports.split = split;
exports.intStringToInt = intStringToInt;
exports.parsing = parsing;
exports.judgeX = judgeX;
exports.judgeY = judgeY;
/* input Not a pure module */
