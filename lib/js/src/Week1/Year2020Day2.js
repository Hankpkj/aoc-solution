// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var input = Fs.readFileSync("input/Week1/Year2020Day2.sample.txt", "utf8");

var li = Belt_List.fromArray(input.split("\n"));

function makeSureString(o) {
  return Belt_Option.mapWithDefault(o, "", (function (x) {
                return x;
              }));
}

function makeSureInt(o) {
  return Belt_Option.mapWithDefault(o, 0, (function (x) {
                return x;
              }));
}

function split(string) {
  return Belt_Array.map(Belt_Array.keep(string.split(/[ :\s | \- | \s ]/g), (function (nullable) {
                    return Belt_Option.mapWithDefault(nullable, "", (function (x) {
                                  return x;
                                })) !== "";
                  })), makeSureString);
}

function intStringToInt(s) {
  var o = Belt_Int.fromString(s);
  return Belt_Option.mapWithDefault(o, 0, (function (x) {
                return x;
              }));
}

function parsing(fullString) {
  var splitted = Belt_List.fromArray(split(fullString));
  if (!splitted) {
    return [
            -1,
            -1,
            "",
            ""
          ];
  }
  var match = splitted.tl;
  if (!match) {
    return [
            -1,
            -1,
            "",
            ""
          ];
  }
  var match$1 = match.tl;
  if (!match$1) {
    return [
            -1,
            -1,
            "",
            ""
          ];
  }
  var match$2 = match$1.tl;
  if (!match$2) {
    return [
            -1,
            -1,
            "",
            ""
          ];
  }
  if (match$2.tl) {
    return [
            -1,
            -1,
            "",
            ""
          ];
  }
  var o = Belt_Int.fromString(splitted.hd);
  var intA = Belt_Option.mapWithDefault(o, 0, (function (x) {
          return x;
        }));
  var o$1 = Belt_Int.fromString(match.hd);
  var intB = Belt_Option.mapWithDefault(o$1, 0, (function (x) {
          return x;
        }));
  return [
          intA,
          intB,
          match$1.hd,
          match$2.hd
        ];
}

function judgeX(policy) {
  var target = policy[2];
  var cnt = Belt_List.size(Belt_List.keep(Belt_List.fromArray(policy[3].split("")), (function (x) {
              return x === target;
            })));
  if (cnt >= policy[0]) {
    return cnt <= policy[1];
  } else {
    return false;
  }
}

function judgeY(policy) {
  var target = policy[2];
  var sourceToArr = policy[3].split("");
  var first = Belt_Option.mapWithDefault(Belt_Array.get(sourceToArr, policy[0] - 1 | 0), "Not Found", (function (x) {
          return x;
        })) === target;
  var second = Belt_Option.mapWithDefault(Belt_Array.get(sourceToArr, policy[1] - 1 | 0), "Not Found", (function (x) {
          return x;
        })) === target;
  return first !== second;
}

console.log(Belt_List.size(Belt_List.keep(Belt_List.map(li, parsing), judgeX)));

console.log(Belt_List.size(Belt_List.keep(Belt_List.map(li, parsing), judgeY)));

exports.input = input;
exports.li = li;
exports.makeSureString = makeSureString;
exports.makeSureInt = makeSureInt;
exports.split = split;
exports.intStringToInt = intStringToInt;
exports.parsing = parsing;
exports.judgeX = judgeX;
exports.judgeY = judgeY;
/* input Not a pure module */
