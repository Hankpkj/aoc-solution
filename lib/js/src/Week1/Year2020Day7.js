// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var input = Fs.readFileSync("input/Week1/Year2020Day7.sample.txt", "utf8");

var arr = input.split("\n");

function id(t) {
  return t;
}

var containRe = /(.*?)\scontain\s(.*?)(?:$)/;

var divideRe = /,\s/;

function makeValueMap(arr) {
  if (arr.length !== 3) {
    return ;
  }
  var num = arr[1];
  var bag = arr[2];
  return Caml_option.some(Belt_MapString.set(undefined, bag, Belt_Int.fromString(num)));
}

function makeMap(key, values) {
  var key$1 = key.replace(/\s(bags|bag)[\.]*/g, "");
  var valueMap = Belt_Array.keepMap(values.replace(/\s(bags|bag)[\.]*/g, "").split(", "), (function (str) {
          var re = /([0-9]+)\s(.*?)(?:$)/;
          var splited = str.match(re);
          if (splited !== null) {
            return makeValueMap(splited);
          }
          
        }));
  return [
          key$1,
          valueMap
        ];
}

function extract(arr) {
  if (arr.length !== 3) {
    return ;
  }
  var k = arr[1];
  var v = arr[2];
  return makeMap(k, v);
}

var maps = Belt_Array.keepMap(arr, (function (s) {
        var matched = s.match(containRe);
        if (matched !== null) {
          return extract(matched);
        }
        
      }));

function getKeyFromMap(m) {
  return Belt_Array.getExn(Belt_MapString.keysToArray(m), 0);
}

function getKeyValueFromMap(m) {
  var toArr = Belt_MapString.toArray(m);
  if (toArr.length !== 1) {
    return ;
  }
  var match = toArr[0];
  return [
          match[0],
          match[1]
        ];
}

var totalMap = Belt_MapString.mergeMany(undefined, maps);

var totalArr = Belt_MapString.toArray(totalMap);

function getParents(s) {
  var parrents = Belt_Array.keepMap(totalArr, (function (param) {
          if (Belt_Array.keep(Belt_Array.map(param[1], getKeyFromMap), (function (t) {
                    return t === s;
                  })).length !== 0) {
            return param[0];
          }
          
        }));
  var set = Belt_SetString.fromArray(parrents);
  var match = Belt_SetString.size(set);
  if (match !== 0) {
    return Belt_SetString.reduce(set, set, (function (acc, cur) {
                  return Belt_SetString.union(acc, getParents(cur));
                }));
  }
  
}

console.log(Belt_SetString.size(getParents("shiny gold")));

function getChildWithParent(key) {
  var children = Belt_MapString.get(totalMap, key);
  if (children !== undefined) {
    return Belt_Array.reduce(Belt_Array.map(Belt_Array.keepMap(children, getKeyValueFromMap), (function (param) {
                      var v = param[1];
                      return Math.imul(getChildWithParent(param[0]), v) + v | 0;
                    })), 0, (function (acc, cur) {
                  return acc + cur | 0;
                }));
  } else {
    return 0;
  }
}

console.log(getChildWithParent("shiny gold"));

exports.input = input;
exports.arr = arr;
exports.id = id;
exports.containRe = containRe;
exports.divideRe = divideRe;
exports.makeValueMap = makeValueMap;
exports.makeMap = makeMap;
exports.extract = extract;
exports.maps = maps;
exports.getKeyFromMap = getKeyFromMap;
exports.getKeyValueFromMap = getKeyValueFromMap;
exports.totalMap = totalMap;
exports.totalArr = totalArr;
exports.getParents = getParents;
exports.getChildWithParent = getChildWithParent;
/* input Not a pure module */
