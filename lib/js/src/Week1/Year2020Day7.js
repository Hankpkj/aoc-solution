// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");

var input = Fs.readFileSync("input/Week1/Year2020Day7.sample.txt", "utf8");

var list = Belt_List.fromArray(input.split("\n"));

function id(t) {
  return t;
}

var cmp = Caml_obj.caml_compare;

var StringCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function valueToTuple(s) {
  var idx = s.indexOf(" ");
  return [
          s.slice(idx + 1 | 0),
          Belt_Option.mapWithDefault(Belt_Int.fromString(s.slice(0, idx)), 0, id)
        ];
}

function makeMap(keyString, valueString) {
  var key = keyString.replace(/ bags/, "");
  var values = valueString.replace(/(?:\sbags\.|\sbag\.|\sbags|\sbag)/g, "").split(", ");
  var tuples = Belt_Array.map(values, valueToTuple);
  var maps = Belt_Array.reduce(tuples, undefined, (function (acc, param) {
          return Belt_MapString.set(acc, param[0], param[1]);
        }));
  return Belt_MapString.set(undefined, key, maps);
}

function parseToMap(s) {
  var split = Belt_List.fromArray(s.split(" contain "));
  if (!split) {
    return makeMap("", "");
  }
  var match = split.tl;
  if (match && !match.tl) {
    return makeMap(split.hd, match.hd);
  } else {
    return makeMap("", "");
  }
}

function findChild(m, k) {
  
}

console.log(parseToMap("posh teal bags contain 2 faded coral bags, 3 striped crimson bags, 1 faded red bag."));

console.log(parseToMap("dotted red bags contain 4 light chartreuse bags."));

exports.input = input;
exports.list = list;
exports.id = id;
exports.StringCmp = StringCmp;
exports.valueToTuple = valueToTuple;
exports.makeMap = makeMap;
exports.parseToMap = parseToMap;
exports.findChild = findChild;
/* input Not a pure module */
