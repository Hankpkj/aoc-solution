// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

var input = Fs.readFileSync("input/Week1/Year2020Day4.sample.txt", "utf8");

var $$require = Belt_SetString.fromArray([
      "byr",
      "hcl",
      "pid",
      "ecl",
      "iyr",
      "hgt",
      "eyr"
    ]);

function parsing(s) {
  return Belt_SetString.fromArray(Belt_Array.keep(Belt_Array.map(s.replace(/[\s]+/g, " ").split(/[\s]+/g), (function (str) {
                        return Belt_Option.mapWithDefault(str, "", (function (x) {
                                        return x;
                                      })).replace(/:[\w#]+/, "");
                      })), (function (x) {
                    return x !== "";
                  })));
}

function judge(s) {
  return Belt_SetString.size(Belt_SetString.intersect(s, $$require)) === 7;
}

console.log(Belt_List.size(Belt_List.keep(Belt_List.map(Belt_List.fromArray(input.split("\n\n")), parsing), judge)));

function nJudge(s, min, max) {
  var n = Belt_Option.mapWithDefault(Belt_Int.fromString(s), 0, (function (x) {
          return x;
        }));
  if (n >= min) {
    return n <= max;
  } else {
    return false;
  }
}

function makeJudgeFtn(s) {
  switch (s) {
    case "byr" :
        return function (n) {
          return nJudge(n, 1920, 2002);
        };
    case "cid" :
        return function (param) {
          return false;
        };
    case "ecl" :
        return function (n) {
          return /^[amb|blu|brn|gry|grn|hzl|oth]{3}$/.test(n);
        };
    case "eyr" :
        return function (n) {
          return nJudge(n, 2020, 2030);
        };
    case "hcl" :
        return function (n) {
          return /^#[a-f0-9]{6}$/.test(n);
        };
    case "hgt" :
        return function (n) {
          if (/^[0-9]+[in]{2}$/.test(n)) {
            return nJudge(n, 59, 76);
          } else if (/^[0-9]+[cm]{2}$/.test(n)) {
            return nJudge(n, 150, 193);
          } else {
            return false;
          }
        };
    case "iyr" :
        return function (n) {
          return nJudge(n, 2010, 2020);
        };
    case "pid" :
        return function (n) {
          return /^[0-9]{9}/.test(n);
        };
    default:
      return function (param) {
        return true;
      };
  }
}

function parsing2(s) {
  return Belt_Array.map(s.replace(/[\s]+/g, " ").split(/[\s]+/g), (function (str) {
                return Belt_Option.mapWithDefault(str, "", (function (x) {
                                return x;
                              })).split(":");
              }));
}

console.log(Belt_List.toArray(Belt_List.keep(Belt_List.map(Belt_List.map(Belt_List.map(Belt_List.fromArray(input.split("\n\n")), parsing2), (function (arr) {
                        return Belt_Array.keep(arr, (function (splited) {
                                      if (splited.length !== 2) {
                                        return false;
                                      }
                                      var key = splited[0];
                                      return makeJudgeFtn(key)(splited[1]);
                                    }));
                      })), (function (arr) {
                    return Belt_SetString.intersect(Belt_SetString.fromArray(Belt_Array.map(arr, (function (splited) {
                                          return Belt_Option.mapWithDefault(Belt_List.head(Belt_List.fromArray(splited)), "", (function (x) {
                                                        return x;
                                                      }));
                                        }))), $$require);
                  })), (function (set) {
                return Belt_SetString.size(set) === 7;
              }))).length);

exports.input = input;
exports.$$require = $$require;
exports.parsing = parsing;
exports.judge = judge;
exports.nJudge = nJudge;
exports.makeJudgeFtn = makeJudgeFtn;
exports.parsing2 = parsing2;
/* input Not a pure module */
