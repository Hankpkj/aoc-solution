// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Util/input.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SortArray = require("rescript/lib/js/belt_SortArray.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var li = Belt_List.fromArray(Input.Input.getInput(/* Single */0, 5));

function range(start, mid, end) {
  return {
          start: start,
          mid: mid,
          end: end
        };
}

function findRange(param, signLeft) {
  var end = param.end;
  var mid = param.mid;
  var start = param.start;
  if (signLeft) {
    return {
            start: start,
            mid: (start + mid | 0) / 2 | 0,
            end: mid
          };
  } else {
    return {
            start: mid + 1 | 0,
            mid: ((mid + 1 | 0) + end | 0) / 2 | 0,
            end: end
          };
  }
}

var initRowRange = {
  start: 0,
  mid: 63,
  end: 127
};

var initColRange = {
  start: 0,
  mid: 3,
  end: 7
};

function findMid(r, ir, c) {
  return Belt_List.reduce(r, ir, (function (acc, cur) {
                return findRange(acc, cur === c);
              }));
}

var ids = Belt_List.toArray(Belt_List.map(li, (function (str) {
            var splitted = Belt_List.splitAt(Belt_List.fromArray(str.split("")), 7);
            return Belt_Option.mapWithDefault(splitted, 0, (function (param) {
                          var row = findMid(param[0], initRowRange, "F").mid;
                          var col = findMid(param[1], initColRange, "L").mid;
                          return (row << 3) + col | 0;
                        }));
          })));

var max = Caml_splice_call.spliceApply(Math.max, [ids]);

console.log(max);

var sorted = Belt_List.fromArray(Belt_SortArray.stableSortBy(ids, (function (a, z) {
            return a - z | 0;
          })));

var slidingWindow = Belt_Option.mapWithDefault(Belt_List.tail(sorted), /* [] */0, (function (tails) {
        return Belt_List.zip(sorted, tails);
      }));

var keeping = Belt_List.head(Belt_List.map(Belt_List.keep(slidingWindow, (function (param) {
                return (param[1] - param[0] | 0) !== 1;
              })), (function (param) {
            return (param[0] + param[1] | 0) / 2 | 0;
          })));

if (keeping !== undefined) {
  console.log(keeping);
} else {
  console.log("Not Found");
}

exports.li = li;
exports.range = range;
exports.findRange = findRange;
exports.initRowRange = initRowRange;
exports.initColRange = initColRange;
exports.findMid = findMid;
exports.ids = ids;
exports.max = max;
exports.sorted = sorted;
exports.slidingWindow = slidingWindow;
exports.keeping = keeping;
/* li Not a pure module */
