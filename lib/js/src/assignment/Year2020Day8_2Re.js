// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Util/input.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var arr = Input.Input.getInput(/* Single */0, 8);

function makeInstruction(s) {
  var match = s.split(" ");
  if (match.length !== 2) {
    return ;
  }
  var match$1 = match[0];
  switch (match$1) {
    case "acc" :
        var v = match[1];
        return Belt_Option.map(Belt_Int.fromString(v), (function (t) {
                      return {
                              TAG: /* Acc */1,
                              _0: t
                            };
                    }));
    case "jmp" :
        var v$1 = match[1];
        return Belt_Option.map(Belt_Int.fromString(v$1), (function (t) {
                      return {
                              TAG: /* Jmp */0,
                              _0: t
                            };
                    }));
    case "nop" :
        var v$2 = match[1];
        return Belt_Option.map(Belt_Int.fromString(v$2), (function (t) {
                      return {
                              TAG: /* Nop */2,
                              _0: t
                            };
                    }));
    default:
      return ;
  }
}

var instructions = Belt_List.fromArray(Belt_Array.keepMap(arr, makeInstruction));

function record(v, l, p) {
  return {
          value: v,
          logs: l,
          passed: p
        };
}

var emptyRecord = {
  value: 0,
  logs: /* [] */0,
  passed: /* Loop */1
};

function equal(a, b) {
  return a === b;
}

function addToSet(li) {
  return function (param) {
    return Belt_List.add(li, param);
  };
}

function $$do(instructions, _currentIdx, _record) {
  while(true) {
    var record = _record;
    var currentIdx = _currentIdx;
    if (Belt_List.length(instructions) === currentIdx) {
      return {
              value: record.value,
              logs: record.logs,
              passed: /* Terminate */0
            };
    }
    if (Belt_List.has(record.logs, currentIdx, equal)) {
      return {
              value: record.value,
              logs: record.logs,
              passed: /* Loop */1
            };
    }
    var li = record.logs;
    var nextRecord_value = record.value;
    var nextRecord_logs = Belt_List.add(li, currentIdx);
    var nextRecord_passed = record.passed;
    var nextRecord = {
      value: nextRecord_value,
      logs: nextRecord_logs,
      passed: nextRecord_passed
    };
    var i = Belt_List.getExn(instructions, currentIdx);
    switch (i.TAG | 0) {
      case /* Jmp */0 :
          _record = nextRecord;
          _currentIdx = currentIdx + i._0 | 0;
          continue ;
      case /* Acc */1 :
          _record = {
            value: nextRecord_value + i._0 | 0,
            logs: nextRecord_logs,
            passed: nextRecord_passed
          };
          _currentIdx = currentIdx + 1 | 0;
          continue ;
      case /* Nop */2 :
          _record = nextRecord;
          _currentIdx = currentIdx + 1 | 0;
          continue ;
      
    }
  };
}

function id(t) {
  return t;
}

var initRecord = $$do(instructions, 0, emptyRecord);

var startIdx = Belt_Option.getWithDefault(Belt_List.get(initRecord.logs, Belt_List.size(initRecord.logs) - 1 | 0), 0);

function change(list, index, value) {
  return Belt_List.mapWithIndex(list, (function (idx, v) {
                if (idx === index) {
                  return value;
                } else {
                  return v;
                }
              }));
}

function modify(i) {
  var v = Belt_List.getExn(instructions, i);
  switch (v.TAG | 0) {
    case /* Jmp */0 :
        return {
                TAG: /* Nop */2,
                _0: v._0
              };
    case /* Acc */1 :
        return Belt_List.getExn(instructions, i);
    case /* Nop */2 :
        return {
                TAG: /* Jmp */0,
                _0: v._0
              };
    
  }
}

function find(_idx) {
  while(true) {
    var idx = _idx;
    var instruction = modify(idx);
    switch (instruction.TAG | 0) {
      case /* Acc */1 :
          _idx = idx + 1 | 0;
          continue ;
      case /* Jmp */0 :
      case /* Nop */2 :
          break;
      
    }
    var t = $$do(change(instructions, idx, instruction), 0, emptyRecord);
    var match = t.passed;
    if (!match) {
      return t;
    }
    _idx = idx + 1 | 0;
    continue ;
  };
}

console.log(find(startIdx));

exports.arr = arr;
exports.makeInstruction = makeInstruction;
exports.instructions = instructions;
exports.record = record;
exports.emptyRecord = emptyRecord;
exports.equal = equal;
exports.addToSet = addToSet;
exports.$$do = $$do;
exports.id = id;
exports.initRecord = initRecord;
exports.startIdx = startIdx;
exports.change = change;
exports.modify = modify;
exports.find = find;
/* arr Not a pure module */
